
<link rel="stylesheet" href="~/wwwroot/css/library.css" />
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css" />
<link rel="stylesheet" href="~/wwwroot/css/Googlemap.css" />

<!-- Wrapper -->
<div id="wrapper">
	<!-- Main -->
	<div id="main">
		<div class="inner">
			<!-- Header -->
			<header id="header">
				<a href="/Home/Library" class="logo"><strong>Library</strong></a>
				<div class="main-cont">
					<div id="time-i">
						<h1>-</h1>
					</div>
					<div id="date-i">
						<h1>-</h1>
					</div>
					<div id="day-i">
						<h1>-</h1>
					</div>
				</div>
			</header>

			<!-- Content -->
			<div class="container">
				<div class="row mt-2">
					<div class="col">
						<input class="form-control" id="search" type="text" placeholder="Search..." />
					</div>
				</div>

				<div class="row">
					<div class="col">
						<div id="map"></div>
					</div>
				</div>
			</div>
		</div>
	</div>

	<!-- Sidebar -->
	<div id="sidebar">
        <div class="inner">
            <!-- Home Back Button -->
            <a href="/Home">
                <div class="home-back-button">
                    <i class="fa fa-arrow-left  fa-fw" aria-hidden="true"></i>Back
                </div>
            </a>

            <!-- Menu -->
            <nav id="menu">
                <header class="major">
                    <h2>Menu</h2>
                </header>

                <ul>
                    <li>@Html.ActionLink("General", "Library", "Home")</li>
                    <li>

                        <span class="opener">Web Directory</span>
                        <ul>
                            <li>@Html.ActionLink("English", "EnglishD", "Home", null)</li>
                            <li>@Html.ActionLink("Math", "MathD", "Home", null)</li>
                            <li>@Html.ActionLink("Filipino", "FilipinoD", "Home", null)</li>
                            <li>@Html.ActionLink("Science", "ScienceD", "Home", null)</li>
                        </ul>
                    </li>
                    <li>
                        <span class="opener">Modules</span>
                        <ul>
                            <li>@Html.ActionLink("Kindergarten", "Kindergarten", "Home", null)</li>
                            <li>@Html.ActionLink("Elementary", "Elementary", "Home", null)</li>
                            <li>@Html.ActionLink("Junior High School", "Junior_high", "Home", null)</li>
                        </ul>
                    </li>
                    <li>
                        <span class="opener">Tables & Charts</span>
                        <ul>
                            <li>@Html.ActionLink("Flags", "Flags", "Home", null)</li>
                            <li>@Html.ActionLink("Numbers", "NumberChart", "Home", null)</li>
                            <li>@Html.ActionLink("Letters", "LetterChart", "Home", null)</li>
                            <li>@Html.ActionLink("Shapes", "Shapes", "Home", null)</li>
                            <li>@Html.ActionLink("Colors", "Color", "Home", null)</li>
                            <li>@Html.ActionLink("Body Parts", "BodyParts", "Home", null)</li>
                            <li>@Html.ActionLink("Multiplication Table", "MultiplicationTable", "Home", null)</li>
                        </ul>
                    </li>
                    <li>
                        <span class="opener">Maps</span>
                        <ul>
                            <li>@Html.ActionLink("World Map", "World", "Home", null)</li>
                            <li>@Html.ActionLink("Country Map", "Country", "Home", null)</li>
                            <li>@Html.ActionLink("Google Map", "Google", "Home", null)</li>
                        </ul>
                    </li>
                    <li>
                        <span class="opener">Videos</span>
                        <ul>
                            <li>@Html.ActionLink("Mini Youtube", "Youtube", "Home", null)</li>
                            <li>@Html.ActionLink("Chanel Recommendation", "Channels", "Home", null)</li>
                        </ul>
                    </li>
                    <li>
                        <span class="opener">eBooks</span>
                        <ul>
                            <li>@Html.ActionLink("Google Ebooks", "Ebook", "Home", null)</li>
                            <li>@Html.ActionLink("Ebooks Web Directory", "eBooksD", "Home", null)</li>
                        </ul>
                    </li>
                    <li>@Html.ActionLink("Trivia", "Trivia", "Home", null)</li>
                    <li>@Html.ActionLink("Dictionary", "Dictionary", "Home", null)</li>
                    <li>@Html.ActionLink("Study Tips", "StudyTips", "Home", null)</li>
                </ul>
            </nav>

            <!-- Section -->
            <!-- Footer -->
            <footer id="footer">
                <p class="copyright">&copy; Systematrics  All rights reserved.</p>
            </footer>
        </div>
	</div>
</div>

<!-- Library script -->
<script src="~/wwwroot/js/jquery.min.js"></script>
<script src="https://use.fontawesome.com/c0d25df00f.js"></script>
<script src="~/wwwroot/js/browser.min.js"></script>
<script src="~/wwwroot/js/breakpoints.min.js"></script>
<script src="~/wwwroot/js/util.js"></script>
<script src="~/wwwroot/js/library.js"></script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBXFAxSgXP7b5D25WEtjxkYqoWM2PjxaLg&callback=initMap&libraries=places" async defer></script>
<script>
	var map;

	function initMap() {
		// Create map
		map = new google.maps.Map(document.getElementById("map"), {
			center: { lat: 14.612442723242824, lng: 120.95363808767301 },
			zoom: 8,
		});

		// Reset the value of the search box
		document.getElementById("search").value = "";

		var input = document.getElementById("search");

		// Create new searchbox constructor
		var searchName = new google.maps.places.SearchBox(input);

		// Set search to stay within bounds first
		map.addListener("bounds_changed", function () {
			searchName.setBounds(map.getBounds());
		});

		// Array to hold search options
		var markers = [];

		// When user selects prediction from list
		searchName.addListener("places_changed", function () {
			// Var to get places
			var places = searchName.getPlaces();

			// If no places then just return (do nothing)
			if (places.length === 0) {
				return;
			}

			// Clear previous markers
			markers.forEach(function (m) {
				m.setMap(null);
			});

			// Reset markers array
			markers = [];

			// bounds object
			var bounds = new google.maps.LatLngBounds();

			places.forEach(function (p) {
				// If no data then just return (do nothing)
				if (!p.geometry) {
					return;
				}

				// push marker with data
				markers.push(
					new google.maps.Marker({
						map: map,
						title: p.title,
						position: p.geometry.location,
					})
				);

				if (p.geometry.viewport) {
					bounds.union(p.geometry.viewport);
				} else {
					bounds.extend(p.geometry.location);
				}
			});
			map.fitBounds(bounds);
		});
	}
</script>